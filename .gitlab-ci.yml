stages:
  - build
  - dockerize 

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

cache:
  paths:
    - apt-cache/

.template: &docker_template
  image: docker:19.03.13-dind
  services:
    - name: docker:19.03.13-dind
      command: ["--experimental"]
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_CLI_EXPERIMENTAL: enabled
    BUILDX_VERSION: "0.4.2"

.template: &docker_buildx
  <<: *docker_template
  stage: dockerize
  before_script:
    - apk --no-cache add curl
  script:
    - export ARCH=$(uname -m)
    - case $ARCH in
        armv6*) ARCH="arm-v6";;
        armv7*) ARCH="arm-v7";;
        aarch64) ARCH="arm64";;
        x86_64) ARCH="amd64";;
      esac
    - curl -L --fail --output /docker-buildx "https://github.com/docker/buildx/releases/download/v${BUILDX_VERSION}/buildx-v${BUILDX_VERSION}.linux-${ARCH}"
    - chmod a+x /docker-buildx
    - mkdir -p /usr/lib/docker/cli-plugins
    - cp /docker-buildx /usr/lib/docker/cli-plugins/docker-buildx
    - docker context create something
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx create --use --name buildx-builder something
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx inspect --bootstrap
    - echo $CONTAINER_RELEASE_IMAGE
    - docker pull $CONTAINER_RELEASE_IMAGE || true
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx build --cache-from $CONTAINER_RELEASE_IMAGE --network host --platform linux/arm64 --push -f Dockerfile -t $CONTAINER_RELEASE_IMAGE .
# End of templates, the real jobs start here

# ---
build:
  image: ubuntu:20.04
  stage: build
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - export APT_CACHE_DIR=`pwd`/apt-cache && mkdir -pv $APT_CACHE_DIR
    - >
      apt-get update && apt-get -o dir::cache::archives="$APT_CACHE_DIR"
      install -y --no-install-recommends
      libopenjp2-tools
      ca-certificates
      gnupg
      rpm
      curl
      build-essential
      curl
      bison
      python3
    - curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
    - curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /usr/share/keyrings/yarnkey.gpg >/dev/null
    - echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main" | tee /etc/apt/sources.list.d/yarn.list
    - apt-get update && apt-get -o dir::cache::archives="$APT_CACHE_DIR" install -y --no-install-recommends nodejs yarn
    - yarn
  script:
    - yarn electron:armbuild
    - ls -la ./dist_electron
  artifacts:
    paths:
      - dist_electron
  only:
    - main

dockerize:
  <<: *docker_buildx
  dependencies:
    - build


